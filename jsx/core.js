function testFunction() {    let savePath = File.saveDialog('Save path','*.miro');    if (savePath === null) return;    return decodeURI(savePath.relativeURI);}function getPages(options) {    let { env, scale } = options;    let pages;    /** Получаем страницы */    if (env === 'IDSN'){        pages = getPagesObjectFromInDesign(scale);    } else if (env === 'ILST'){        pages = getPagesObjectFromIllustrator(scale);    }    if (pages === undefined) return;    /** Диалог сохранения файла */    let savePath = File.saveDialog('Save path','*.miro');    if (savePath === null) return;    return JSON.stringify({ path: decodeURI(savePath.relativeURI), pages: pages });}function exportPages(options){    let { pages, env, path, scale } = options;    /** Пишем все картинки */    if (env === 'IDSN'){        exportImagesFromInDesign(pages,path,scale);    } else if (env === 'ILST'){        exportImagesFromIllustrator(pages,path,scale);    }    exportJSON(pages,path);    return true;}/**+++++++++++++++++++++++++++++++++++++++++++++++++**//**+++++++++++++++++++++++++++++++++++++++++++++++++**/function getPagesObjectFromInDesign(scale) {    const hmu = app.activeDocument.viewPreferences.horizontalMeasurementUnits;    const vmu = app.activeDocument.viewPreferences.verticalMeasurementUnits;    app.activeDocument.viewPreferences.horizontalMeasurementUnits = MeasurementUnits.PIXELS;    app.activeDocument.viewPreferences.verticalMeasurementUnits = MeasurementUnits.PIXELS;    const pages = app.activeDocument.pages;    const arr = pages.map((page)=>{        let bounds = page.bounds.map((item)=>{return Math.round(item)});        return {layoutIndex: page.index, id: page.id, bounds: bounds, layout: page.appliedAlternateLayout.alternateLayout};    });    let obj = {};    arr.forEach((item)=>{        if (obj[item.layout]){            obj[item.layout].push(item)        } else {            obj[item.layout] = [item]        }    });    let arrByLayout = [];    let prevSpredWidth = 0;    let currSpredWidth = 0;    const keys = Object.keys(obj);    keys.forEach((key,k)=>{        let arr = obj[key];        let mod = -1;        arr.forEach((el,e)=>{            if (el.layoutIndex === 0) { mod++ }            arrByLayout.push(getPageObject(el,e,mod));        });        prevSpredWidth = prevSpredWidth + currSpredWidth + 500 * scale;        currSpredWidth = 0;    });    function getPageObject(el,e,mod) {        let h = (el.bounds[2]-el.bounds[0]) * scale;        let w = (el.bounds[3]-el.bounds[1]) * scale;        if (currSpredWidth < el.bounds[3] * scale) { currSpredWidth = el.bounds[3] * scale }                return {            title: el.layout + ' : page ' + (e+1),            externalId: el.id,            filename: el.id + '.jpg',            pageStr: el.layout + ':' + (e+1),            y: h * 0.5 + h * 1.2 * mod,            x: w * 0.5 + el.bounds[1] * scale + prevSpredWidth,            height: h,            width: w,        }    }    app.activeDocument.viewPreferences.horizontalMeasurementUnits = hmu;    app.activeDocument.viewPreferences.verticalMeasurementUnits = vmu;	return arrByLayout;}function exportImagesFromInDesign(pages,path,scale){    pages.forEach((page)=>{        let file = new File(path + page.filename);        app.jpegExportPreferences.jpegExportRange = ExportRangeOrAllPages.EXPORT_RANGE;        app.jpegExportPreferences.pageString = page.pageStr;        app.jpegExportPreferences.exportResolution = 72 * scale;        app.jpegExportPreferences.jpegQuality = JPEGOptionsQuality.HIGH;        //	app.jpegExportPreferences.jpegQuality = JPEGOptionsQuality.MAXIMUM;        app.activeDocument.exportFile(ExportFormat.JPG, file);    });}/**+++++++++++++++++++++++++++++++++++++++++++++++++**//**+++++++++++++++++++++++++++++++++++++++++++++++++**/function getPagesObjectFromIllustrator(scale) {    const artboards = app.activeDocument.artboards;    let artboardsNames = getArtboardsNames(artboards);    if (artboards.length > artboardsNames.length) {        alert('Artboard names must be unique! They will be used to update artboards on miro board.');        return;    }    function getArtboardsNames(artboards) {        let obj = {};        artboards.forEach((el,e)=>{obj[el.name]=e});        return Object.keys(obj);    }    const arr = artboards.map((el)=>{        let h = (el.artboardRect[1]-el.artboardRect[3]) * scale;        let w = (el.artboardRect[2]-el.artboardRect[0]) * scale;        return {            title: el.name,            externalId: el.name,            filename: el.name.replace(' ','_').toLowerCase() + '.png',            y: - ( h * 0.5 + el.artboardRect[3] * scale ),            x: w * 0.5 + el.artboardRect[0] * scale,            height: h,            width: w,            artboardRect: el.artboardRect        };    });    return arr;}function exportImagesFromIllustrator(pages,path,scale){    pages.forEach((page,p)=>{        let exportOptions = new ImageCaptureOptions();        exportOptions.antiAliasing = true;        exportOptions.matte = true;        exportOptions.resolution = 72 * scale;        exportOptions.transparency = false;        let fileSpec = new File(path + page.filename);        app.activeDocument.imageCapture(fileSpec, page.artboardRect, exportOptions);    })}/**+++++++++++++++++++++++++++++++++++++++++++++++++**//**+++++++++++++++++++++++++++++++++++++++++++++++++**/function exportJSON(json,saveStr) {    let file = new File(saveStr + 'images.json');    file.encoding = "utf-8";    file.open("w");    let jsonFileStr = JSON.stringify(json);    file.write(jsonFileStr);    file.close();    return null;}function coreAlert(message) { alert(message) }